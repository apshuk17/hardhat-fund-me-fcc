{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb85b8eecbd1a0deba7437a6d027f3dd4020b307354cf741bc30eaa97a4916073",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1495438",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfe50c6cf4b762a8b0d4e9c229614ff1f91049881c7eb6e18852c31f9adc4f6a5",
    "transactionHash": "0xb85b8eecbd1a0deba7437a6d027f3dd4020b307354cf741bc30eaa97a4916073",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1495438",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "6968578c8cb0a3512129f74288fd5c5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Apoorva Shukla\",\"details\":\"This implements chainlink price feed as our library\",\"kind\":\"dev\",\"methods\":{\"withdraw()\":{\"details\":\"This function uses call to transfer contract balance\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor receive fallback external public internal private view/pure\"},\"withdraw()\":{\"notice\":\"This function is to transfer the contract balance to the owner\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./PriceConsumerV3.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Apoorva Shukla\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements chainlink price feed as our library\\n */\\ncontract FundMe {\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    PriceConsumerV3 private s_priceConsumer;\\n    address private immutable i_owner;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == getOwner(), \\\"Sender is not the owner!\\\");\\n        if (msg.sender != getOwner()) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Functions Order\\n    /**\\n     * constructor\\n     * receive\\n     * fallback\\n     * external\\n     * public\\n     * internal\\n     * private\\n     * view/pure\\n     */\\n    constructor(address _priceFeedAddress) {\\n        s_priceConsumer = new PriceConsumerV3(_priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function is to transfer the contract balance to the owner\\n     * @dev This function uses call to transfer contract balance\\n     */\\n    function withdraw() external onlyOwner {\\n        // set the amount to zero of s_addressToAmountFunded addresses\\n        for (uint256 i = 0; i < s_funders.length; i += 1) {\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // Reset the s_funders array\\n        s_funders = new address[](0);\\n\\n        // Transfer the balance to message sender\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() external onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (uint256 i = 0; i < funders.length; i += 1) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // Reset the s_funders array\\n        s_funders = new address[](0);\\n\\n        // Transfer the balance to owner\\n        (bool callSuccess, ) = payable(i_owner).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceConsumer.getPriceFeed();\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            s_priceConsumer.getConversionRate(msg.value) >= MINIMUM_USD,\\n            \\\"Didn't send enough money\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n}\\n\",\"keccak256\":\"0x3335644a45ce2c84ae7498e4dfc8054ffaa6601845c2025879c53627fd6f7e4c\",\"license\":\"MIT\"},\"contracts/PriceConsumerV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract PriceConsumerV3 {\\n    // Type declarations\\n    using PriceConverter for AggregatorV3Interface;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address _priceFeedAddress) {\\n        s_priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getLatestPrice() public view returns (uint256) {\\n        return getPriceFeed().getLatestPrice();\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return getPriceFeed().getVersion();\\n    }\\n\\n    function getConversionRate(uint256 ethAmount) public view returns (uint256) {\\n        return getPriceFeed().getConversionRate(ethAmount);\\n    }\\n}\",\"keccak256\":\"0xc7a31d5c600e6967a102930d6177405c8649f4f2f3083c4cf150374e9a128984\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getDecimals(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 decimalsLeft = uint256(18) - getDecimals(priceFeed);\\n        (,int price,,,) = priceFeed.latestRoundData();\\n        return uint256(price) * 10 ** decimalsLeft;\\n    }\\n\\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(AggregatorV3Interface priceFeed, uint256 ethAmount) internal view returns (uint256) {\\n        uint256 ethPriceInUSD = getLatestPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethAmount * ethPriceInUSD) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\",\"keccak256\":\"0x1a65645eaaff5a089867dc3d675b43499d7947cdcb22fe871a10a94f9bf221f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b9638038062001b96833981810160405281019062000037919062000165565b806040516200004690620000ed565b620000529190620001a8565b604051809103906000f0801580156200006f573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050620001c5565b610a54806200114283390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012d8262000100565b9050919050565b6200013f8162000120565b81146200014b57600080fd5b50565b6000815190506200015f8162000134565b92915050565b6000602082840312156200017e576200017d620000fb565b5b60006200018e848285016200014e565b91505092915050565b620001a28162000120565b82525050565b6000602082019050620001bf600083018462000197565b92915050565b60805160601c610f57620001eb60003960008181610683015261092e0152610f576000f3fe60806040526004361061008a5760003560e01c80636f9fb98a116100595780636f9fb98a1461015f578063893d20e81461018a5780639e87a5cd146101b5578063b60d4288146101e0578063be2693f0146101ea57610099565b80630343fb25146100a35780633a7b6c74146100e05780633ccfd60b1461011d5780636b69a5921461013457610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b04565b6103b0565b6040516100d79190610b4a565b60405180910390f35b3480156100ec57600080fd5b5061010760048036038101906101029190610b91565b6103f9565b6040516101149190610bcd565b60405180910390f35b34801561012957600080fd5b50610132610441565b005b34801561014057600080fd5b5061014961066a565b6040516101569190610b4a565b60405180910390f35b34801561016b57600080fd5b50610174610677565b6040516101819190610b4a565b60405180910390f35b34801561019657600080fd5b5061019f61067f565b6040516101ac9190610bcd565b60405180910390f35b3480156101c157600080fd5b506101ca6106a7565b6040516101d79190610c47565b60405180910390f35b6101e8610201565b005b3480156101f657600080fd5b506101ff61074d565b005b6802b5e3af16b188000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e5b6b28346040518263ffffffff1660e01b81526004016102649190610b4a565b60206040518083038186803b15801561027c57600080fd5b505afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610c77565b10156102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec90610d01565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610d50565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061040f5761040e610da6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61044961067f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561055a576000600182815481106104d3576104d2610da6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001816105539190610d50565b90506104b0565b50600067ffffffffffffffff81111561057657610575610dd5565b5b6040519080825280602002602001820160405280156105a45781602001602082028036833780820191505090505b50600190805190602001906105ba9291906109fa565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105e190610e35565b60006040518083038185875af1925050503d806000811461061e576040519150601f19603f3d011682016040523d82523d6000602084013e610623565b606091505b5050905080610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90610e96565b60405180910390fd5b50565b6802b5e3af16b188000081565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e87a5cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610ef4565b905090565b61075561067f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561083d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107f3575b5050505050905060005b81518110156108c957600082828151811061086557610864610da6565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001816108c29190610d50565b9050610847565b50600067ffffffffffffffff8111156108e5576108e4610dd5565b5b6040519080825280602002602001820160405280156109135781602001602082028036833780820191505090505b50600190805190602001906109299291906109fa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161097090610e35565b60006040518083038185875af1925050503d80600081146109ad576040519150601f19603f3d011682016040523d82523d6000602084013e6109b2565b606091505b50509050806109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90610e96565b60405180910390fd5b5050565b828054828255906000526020600020908101928215610a73579160200282015b82811115610a725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a1a565b5b509050610a809190610a84565b5090565b5b80821115610a9d576000816000905550600101610a85565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad182610aa6565b9050919050565b610ae181610ac6565b8114610aec57600080fd5b50565b600081359050610afe81610ad8565b92915050565b600060208284031215610b1a57610b19610aa1565b5b6000610b2884828501610aef565b91505092915050565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b610b6e81610b31565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b600060208284031215610ba757610ba6610aa1565b5b6000610bb584828501610b7c565b91505092915050565b610bc781610ac6565b82525050565b6000602082019050610be26000830184610bbe565b92915050565b6000819050919050565b6000610c0d610c08610c0384610aa6565b610be8565b610aa6565b9050919050565b6000610c1f82610bf2565b9050919050565b6000610c3182610c14565b9050919050565b610c4181610c26565b82525050565b6000602082019050610c5c6000830184610c38565b92915050565b600081519050610c7181610b65565b92915050565b600060208284031215610c8d57610c8c610aa1565b5b6000610c9b84828501610c62565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f756768206d6f6e65790000000000000000600082015250565b6000610ceb601883610ca4565b9150610cf682610cb5565b602082019050919050565b60006020820190508181036000830152610d1a81610cde565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5b82610b31565b9150610d6683610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9b57610d9a610d21565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e1f600083610e04565b9150610e2a82610e0f565b600082019050919050565b6000610e4082610e12565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e80600b83610ca4565b9150610e8b82610e4a565b602082019050919050565b60006020820190508181036000830152610eaf81610e73565b9050919050565b6000610ec182610ac6565b9050919050565b610ed181610eb6565b8114610edc57600080fd5b50565b600081519050610eee81610ec8565b92915050565b600060208284031215610f0a57610f09610aa1565b5b6000610f1884828501610edf565b9150509291505056fea26469706673582212207e0e5ced9f4f43b3636bd881db031ab98a95bf22d29eccb562cbc9b01d8b985d64736f6c63430008080033608060405234801561001057600080fd5b50604051610a54380380610a54833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61093d806101176000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d8e6e2c146100515780636e5b6b281461006f5780638e15f4731461009f5780639e87a5cd146100bd575b600080fd5b6100596100db565b60405161006691906103be565b60405180910390f35b6100896004803603810190610084919061040a565b610108565b60405161009691906103be565b60405180910390f35b6100a7610141565b6040516100b491906103be565b60405180910390f35b6100c561016e565b6040516100d291906104b6565b60405180910390f35b60006101036100e861016e565b73ffffffffffffffffffffffffffffffffffffffff16610197565b905090565b600061013a8261011661016e565b73ffffffffffffffffffffffffffffffffffffffff1661021e90919063ffffffff16565b9050919050565b600061016961014e61016e565b73ffffffffffffffffffffffffffffffffffffffff1661025a565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008173ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021791906104e6565b9050919050565b60008061022a8461025a565b90506000670de0b6b3a764000082856102439190610542565b61024d91906105cb565b9050809250505092915050565b6000806102668361031b565b601261027291906105fc565b905060008373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102bc57600080fd5b505afa1580156102d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f491906106a8565b50505091505081600a6103079190610856565b816103129190610542565b92505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b91906108da565b60ff169050919050565b6000819050919050565b6103b8816103a5565b82525050565b60006020820190506103d360008301846103af565b92915050565b600080fd5b6103e7816103a5565b81146103f257600080fd5b50565b600081359050610404816103de565b92915050565b6000602082840312156104205761041f6103d9565b5b600061042e848285016103f5565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061047c61047761047284610437565b610457565b610437565b9050919050565b600061048e82610461565b9050919050565b60006104a082610483565b9050919050565b6104b081610495565b82525050565b60006020820190506104cb60008301846104a7565b92915050565b6000815190506104e0816103de565b92915050565b6000602082840312156104fc576104fb6103d9565b5b600061050a848285016104d1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061054d826103a5565b9150610558836103a5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561059157610590610513565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006105d6826103a5565b91506105e1836103a5565b9250826105f1576105f061059c565b5b828204905092915050565b6000610607826103a5565b9150610612836103a5565b92508282101561062557610624610513565b5b828203905092915050565b600069ffffffffffffffffffff82169050919050565b61064f81610630565b811461065a57600080fd5b50565b60008151905061066c81610646565b92915050565b6000819050919050565b61068581610672565b811461069057600080fd5b50565b6000815190506106a28161067c565b92915050565b600080600080600060a086880312156106c4576106c36103d9565b5b60006106d28882890161065d565b95505060206106e388828901610693565b94505060406106f4888289016104d1565b9350506060610705888289016104d1565b92505060806107168882890161065d565b9150509295509295909350565b60008160011c9050919050565b6000808291508390505b600185111561077a5780860481111561075657610755610513565b5b60018516156107655780820291505b808102905061077385610723565b945061073a565b94509492505050565b600082610793576001905061084f565b816107a1576000905061084f565b81600181146107b757600281146107c1576107f0565b600191505061084f565b60ff8411156107d3576107d2610513565b5b8360020a9150848211156107ea576107e9610513565b5b5061084f565b5060208310610133831016604e8410600b84101617156108255782820a9050838111156108205761081f610513565b5b61084f565b6108328484846001610730565b9250905081840481111561084957610848610513565b5b81810290505b9392505050565b6000610861826103a5565b915061086c836103a5565b92506108997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610783565b905092915050565b600060ff82169050919050565b6108b7816108a1565b81146108c257600080fd5b50565b6000815190506108d4816108ae565b92915050565b6000602082840312156108f0576108ef6103d9565b5b60006108fe848285016108c5565b9150509291505056fea26469706673582212201b36a3acabcdd5d8ef2a0974dcea47fc73a65d8a2c7e39cd19f9763fa8998c2964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636f9fb98a116100595780636f9fb98a1461015f578063893d20e81461018a5780639e87a5cd146101b5578063b60d4288146101e0578063be2693f0146101ea57610099565b80630343fb25146100a35780633a7b6c74146100e05780633ccfd60b1461011d5780636b69a5921461013457610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b04565b6103b0565b6040516100d79190610b4a565b60405180910390f35b3480156100ec57600080fd5b5061010760048036038101906101029190610b91565b6103f9565b6040516101149190610bcd565b60405180910390f35b34801561012957600080fd5b50610132610441565b005b34801561014057600080fd5b5061014961066a565b6040516101569190610b4a565b60405180910390f35b34801561016b57600080fd5b50610174610677565b6040516101819190610b4a565b60405180910390f35b34801561019657600080fd5b5061019f61067f565b6040516101ac9190610bcd565b60405180910390f35b3480156101c157600080fd5b506101ca6106a7565b6040516101d79190610c47565b60405180910390f35b6101e8610201565b005b3480156101f657600080fd5b506101ff61074d565b005b6802b5e3af16b188000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e5b6b28346040518263ffffffff1660e01b81526004016102649190610b4a565b60206040518083038186803b15801561027c57600080fd5b505afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610c77565b10156102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec90610d01565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a79190610d50565b92505081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061040f5761040e610da6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61044961067f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561055a576000600182815481106104d3576104d2610da6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001816105539190610d50565b90506104b0565b50600067ffffffffffffffff81111561057657610575610dd5565b5b6040519080825280602002602001820160405280156105a45781602001602082028036833780820191505090505b50600190805190602001906105ba9291906109fa565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105e190610e35565b60006040518083038185875af1925050503d806000811461061e576040519150601f19603f3d011682016040523d82523d6000602084013e610623565b606091505b5050905080610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e90610e96565b60405180910390fd5b50565b6802b5e3af16b188000081565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e87a5cd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107489190610ef4565b905090565b61075561067f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561083d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107f3575b5050505050905060005b81518110156108c957600082828151811061086557610864610da6565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506001816108c29190610d50565b9050610847565b50600067ffffffffffffffff8111156108e5576108e4610dd5565b5b6040519080825280602002602001820160405280156109135781602001602082028036833780820191505090505b50600190805190602001906109299291906109fa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161097090610e35565b60006040518083038185875af1925050503d80600081146109ad576040519150601f19603f3d011682016040523d82523d6000602084013e6109b2565b606091505b50509050806109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90610e96565b60405180910390fd5b5050565b828054828255906000526020600020908101928215610a73579160200282015b82811115610a725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a1a565b5b509050610a809190610a84565b5090565b5b80821115610a9d576000816000905550600101610a85565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad182610aa6565b9050919050565b610ae181610ac6565b8114610aec57600080fd5b50565b600081359050610afe81610ad8565b92915050565b600060208284031215610b1a57610b19610aa1565b5b6000610b2884828501610aef565b91505092915050565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b610b6e81610b31565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b600060208284031215610ba757610ba6610aa1565b5b6000610bb584828501610b7c565b91505092915050565b610bc781610ac6565b82525050565b6000602082019050610be26000830184610bbe565b92915050565b6000819050919050565b6000610c0d610c08610c0384610aa6565b610be8565b610aa6565b9050919050565b6000610c1f82610bf2565b9050919050565b6000610c3182610c14565b9050919050565b610c4181610c26565b82525050565b6000602082019050610c5c6000830184610c38565b92915050565b600081519050610c7181610b65565b92915050565b600060208284031215610c8d57610c8c610aa1565b5b6000610c9b84828501610c62565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f756768206d6f6e65790000000000000000600082015250565b6000610ceb601883610ca4565b9150610cf682610cb5565b602082019050919050565b60006020820190508181036000830152610d1a81610cde565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5b82610b31565b9150610d6683610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9b57610d9a610d21565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e1f600083610e04565b9150610e2a82610e0f565b600082019050919050565b6000610e4082610e12565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e80600b83610ca4565b9150610e8b82610e4a565b602082019050919050565b60006020820190508181036000830152610eaf81610e73565b9050919050565b6000610ec182610ac6565b9050919050565b610ed181610eb6565b8114610edc57600080fd5b50565b600081519050610eee81610ec8565b92915050565b600060208284031215610f0a57610f09610aa1565b5b6000610f1884828501610edf565b9150509291505056fea26469706673582212207e0e5ced9f4f43b3636bd881db031ab98a95bf22d29eccb562cbc9b01d8b985d64736f6c63430008080033",
  "devdoc": {
    "author": "Apoorva Shukla",
    "details": "This implements chainlink price feed as our library",
    "kind": "dev",
    "methods": {
      "withdraw()": {
        "details": "This function uses call to transfer contract balance"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor receive fallback external public internal private view/pure"
      },
      "withdraw()": {
        "notice": "This function is to transfer the contract balance to the owner"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceConsumer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PriceConsumerV3)403"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(PriceConsumerV3)403": {
        "encoding": "inplace",
        "label": "contract PriceConsumerV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
